/*1.ROS初始化函数：
 ros::init(argc,argv,"name");
 参数：
        1.argc   ---- 封装实参个数（n+1),第一个为文件本身
        2.argv   ---- 封装参数的数组
        3.name   ---- 为节点命名（唯一性）
        4.options ---- 节点启动选项
        返回值：void
 使用：
        1. argc 与 argv 的使用
        如果按照ros中的特定格式传入实参，则ros可以使用， 例如设置全局变量，给节点重命名······

        2. options 的使用
        节点名称需要保证唯一，导致问题：同一个节点不能重复启动；
        如果启动重名的节点，上一个节点将被关闭；
        需求：特定条件下，需要一个节点多次启动且能正常运行
        做法：设置启动项 ros::init_options::AnonymousName
              原因：用户在创建节点时，会在节点名称后缀随机数，从而避免节点重名
    
        
2.话题服务对象：
 advertise函数：    
    作用：创建发布者对象 
    模板：被发布的消息的类型
    参数：
     1.话题名称
     2.队列长度
     3.latch（可选） 若设置为true，会保存发布的最后一条消息，当有新订阅对象连接到发布方时，发送此条消息给订阅对象
    使用： 
    latch 设置为 true ,发布者只发布一次数据，当订阅者连接时，将数据发送给订阅者（只发送一次）； 
    
3.回旋函数：
   1.spin函数：在代码中执行回调函数，循环执行，不会自动退出，后面代码不会执行；

   2.spinonce函数：在代码中只处理一轮回调，之后退出，之后该函数以后的语句被执行；

4. 时间之时刻：
   作用：
   1.获取当前的时刻：
     调用ros::Time下的now函数，前提是先创建节点句柄（NodeHandle会初始化时间操作）
     当前时刻是now函数被调用的时刻；

   2.设置指定的时刻： 
     使用ros::Time下的构造函数：1.设置一个秒数，再设置一个纳秒数；2.设置一个浮点秒数；

  时间之持续时间：
  作用：设置一个时间区间（间隔）：
  使用ros::Duration 函数，先设置对象，再在后面括号中设置持续时间的秒数，再使用sleep函数即可；

  时间之运算：
  做法：
      1.获取开始执行的时刻；
      2.设置运行时间；
      3.结束时刻 = 开始 + 持续时间；
   1.时刻与持续时间可以执行加减；
   2.时刻之间只能相减，不能相加；
   3.持续时间之间可以相加减；

  时间之定时器：
  作用：实现与ros::Rate相似的效果；
  实现：1.创建句柄NodeHandle;
        2.使用nh.createTimer函数：该函数有两个参数，第一个是ros::Duration()用来设置时间间隔,第二个为回调函数；
          回调函数中参数为ros::TimerEvent,函数体中代码实现；
          
        参数1：   * \param period 时间间隔
        参数2：   * \param callback 回调函数
        参数3：   * \param oneshot 如果设置为 true,只执行一次回调函数，设置为 false,就循环执行。
        参数4：   * \param autostart 如果为true，返回已经启动的定时器,设置为 false，需要手动启动。
 注意：当参数4设置为false时，需要手动调用timer.start()才能启动；
       定时器启动后，要使用ros::spin(); 
   
  其他函数：
c++_节点生命周期：
  1.手动关闭节点，可使用相关api：ros::shutdown();
  2.快捷键关闭节点：ctrl + c;
  3.同名节点的启动；
c++_日志输出：
  1.debug(调试)：调试时使用，此类消息不输出到控制台；
  2.INFO(信息)： 标准信息，一般用于说明系统内正在执行的操作；
  3.warn(警告)：提醒一些异常情况，但程序仍然可以执行；
  4.error(错误)：提示错误信息，此类错误会影响程序运行；
  5.fatal(严重错误)：此类错误将阻止节点继续运行。
    级别依次递增。
*/  



